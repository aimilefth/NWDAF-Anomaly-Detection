services:
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: privateer_mlflow_server
    restart: unless-stopped
    ports:
      - "5050:5050"
    volumes:
      - ./mlruns:/mlruns
      - ./mlartifacts:/mlartifacts
    command: mlflow server --host 0.0.0.0 --port 5050 --backend-store-uri file:///mlruns --default-artifact-root file:///mlartifacts
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5050/health', timeout=5)"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - privateer-net

  # Kafka for event streaming
  kafka:
    image: bitnami/kafka:latest
    container_name: privateer-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      # Additional configs to speed up startup
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - privateer-net

  # Data Producer - Reads test dataset
  data-producer:
    build:
      context: ..
      dockerfile: ./demo/Dockerfile.producer
    container_name: privateer-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=raw-network-data
      - INTERVAL=0.5
    volumes:
      - ../privateer_ad:/app/privateer_ad
      - ../data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "python -c \"import os; from privateer_ad.config.settings import PathConfig; paths = PathConfig(); assert os.path.exists(paths.raw_dataset), 'Dataset not found'; print('Files OK')\""]
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - privateer-net

  # Anonymization Service
  anonymizer:
    build:
      context: ..
      dockerfile: ./demo/Dockerfile.anonymizer
    container_name: privateer-anonymizer
    depends_on:
      kafka:
        condition: service_healthy
      data-producer:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INPUT_TOPIC=raw-network-data
      - OUTPUT_TOPIC=anonymized-data
    volumes:
      - ../privateer_ad:/app/privateer_ad
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "python -c \"from kafka import KafkaProducer; import os; KafkaProducer(bootstrap_servers=os.environ.get('KAFKA_BOOTSTRAP_SERVERS', 'kafka:9092'), request_timeout_ms=3000).close(); print('OK')\""]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s
    networks:
      - privateer-net

  # Anomaly Detector
  anomaly-detector:
    build:
      context: ..
      dockerfile: ./demo/Dockerfile.detector
    container_name: privateer-detector
    depends_on:
      kafka:
        condition: service_healthy
      mlflow:
        condition: service_healthy
      anonymizer:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INPUT_TOPIC=anonymized-data
      - ALERT_TOPIC=anomaly-alerts
      - PRIVATEER_MLFLOW_TRACKING_URI=http://mlflow:5000
      - PRIVATEER_MODEL_MODEL_TYPE=TransformerAD_DP
      # Additional configuration
      - PRIVATEER_PATH_ROOT_DIR=/app
      - PRIVATEER_DATA_BATCH_SIZE=1
      - PRIVATEER_DATA_SEQ_LEN=12
    volumes:
      # Mount data directory for scalers and models if needed
      - ../data:/app/data
      - ../scalers:/app/scalers
    restart: unless-stopped
    networks:
      - privateer-net
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; import privateer_ad; print('OK')"]
      interval: 30s
      timeout: 15s
      retries: 3

  # Alert Consumer (for monitoring)
  alert-monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: privateer-monitor
    depends_on:
      kafka:
        condition: service_healthy
      anomaly-detector:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ALERT_TOPIC=anomaly-alerts
    restart: unless-stopped
    networks:
      - privateer-net

networks:
  privateer-net:
    driver: bridge